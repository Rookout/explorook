type Repository {
  fullpath: String!
  repoName: String!
  id: String!
  indexDone: Boolean
  lastCommitDescription: CommitDescription
}

type FileInfo {
  path: String!
  name: String!
  isFolder: Boolean!
  size: Int
}

type Author {
  name: String
  email: String
  timestamp: Int
}

type CommitDescription {
  message: String!
  author: Author!
  oid: String!
}

type Query {
  dir(repoId: String!, path: String!): [FileInfo]!
  file(repoId: String!, path: String!): String!
  listTree(repoId: String!): [String]!
  listRepos: [Repository!]!
  refreshIndex(repoId: String!): Boolean
  repository(repoId: String!): Repository!
  getAllPerforceViews: [PerforceView]
  getPerforceChangelistForFile(repoId: String!, path: String!): String
  getCommitIdForFile(
    provider: OnPremSourceProvider!
    remoteOrigin: String
    repoId: String!
    path: String!
  ): String
}

type OperationStatus {
  isSuccess: Boolean!
  reason: String
}

input GitSource {
  repoUrl: String!
  commit: String!
}

type Mutation {
  addRepository(fullpath: String): Boolean
  changePerforceViews(views: [String]!): OperationStatus!
  switchPerforceChangelist(changelistId: String!): OperationStatus!
  getGitRepo(sources: [GitSource]!): OperationStatus!
}

type PerforceView {
  name: String!
  map: String!
}

enum OnPremSourceProvider {
  git
  perforce
}
