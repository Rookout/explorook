type Repository {
  fullpath: String!
  repoName: String!
  id: String!
  indexDone: Boolean
  lastCommitDescription: CommitDescription
}

type FileInfo {
  path: String!
  name: String!
  isFolder: Boolean!
  size: Int
}

type Author {
  name: String
  email: String
  timestamp: Int
}

type CommitDescription {
  message: String!
  author: Author!
  oid: String!
}

type Query {
  appVersion: String!
  dir(repoId: String!, path: String!): [FileInfo]!
  file(repoId: String!, path: String!): String!
  listTree(repoId: String!): [String]!
  listRepos: [Repository!]!
  refreshIndex(repoId: String!): Boolean
  refreshAllIndices: Boolean @deprecated(reason: "Use refreshMultipleIndices instead to avoid refreshing repos that are not currently used by the client")
  refreshMultipleIndices(repoIds: [String!]!): Boolean
  repository(repoId: String!): Repository!
  getCommitIdForFile(
    provider: OnPremSourceProvider!
    remoteOrigin: String
    repoId: String!
    path: String!
  ): String @deprecated(reason: "Unused")
  settings: Settings! @deprecated(reason: "Unused")
  canAuthGitRepos(sources: [GitRepo]!): [CanAuthGitRepoResponse]! @deprecated(reason: "Unused")
  BitbucketOnPrem: BitbucketOnPrem!
  langServerConfig: LangServerConfig!
  recentLogs: [Log]!
}

input BitbucketInput {
  url: String!
  accessToken: String!
  projectKey: String
  repoName: String
  commit: String
  branch: String
  filePath: String
  treeSize: Int
}

input BitbucketTreeInput {
  projectKey: String!
  repoName: String!
  commit: String!
  searchTerm: String
  maxResults: Int
}

input GitRepo {
  repoUrl: String!
}

type CanAuthGitRepoResponse {
  repoUrl: String!
  isSuccess: Boolean!
  reason: String
}

type Settings {
  BitbucketOnPremServers: [String]
}

input SettingsInput {
  BitbucketOnPremServers: [String] @deprecated(reason: "there is no need to pre-configure valid URLs")
  """use this flag to signal that the provided settings should override any
  global settings provided by the admin.
  When a user edits his own local settings - set this flag to true
  When applying the global settings of the organization - set this flag to false"""
  OverrideGlobal: Boolean @deprecated(reason: "Unused")
}

type LangServerConfig {
  java: javaLangServerConfig
}

type javaLangServerConfig {
  jdkLocation: String
  jdkMinimumVersionRequired: String
}

type OperationStatus {
  isSuccess: Boolean!
  reason: String
}

input GitSource {
  repoUrl: String!
  commit: String!
}

type Mutation {
  addRepository(fullpath: String): Boolean
  removeRepository(repoId: String!): Boolean
  getGitRepo(sources: [GitSource]!): OperationStatus! @deprecated(reason: "Unused")
  settings(settings: SettingsInput): Settings! @deprecated(reason: "Unused")
  userEmail(userEmail: String): Boolean
  langServerConfig: LangServerOps!
}

type LangServerOps {
  setJavaLangServerConfig(config: JavaLangServerConfigInput): OperationStatus!
}

input JavaLangServerConfigInput {
  jdkLocation: String
}

enum OnPremSourceProvider {
  git
}

type BitbucketOnPrem {
  fileTree(args: BitbucketInput!): [String]
  fileTreePageLimit(args: BitbucketInput!): Int
  isTreeLargerThan(args: BitbucketInput!): Boolean
  cacheTree(args: BitbucketInput!): Boolean
  cancelCacheTree: Boolean
  removeTreeFromCache(args: BitbucketTreeInput!): Boolean
  cleanTreeCache: Boolean
  isTreeCached(args: BitbucketTreeInput!): Boolean
  allCachedRepos: [BitbucketRepoBeingCached]
  searchTree(args: BitbucketTreeInput!): [String]
  repoBeingCached: BitbucketRepoBeingCached
  fileTreeByPath(args: BitbucketInput!): [String]
  user(args: BitbucketInput!): BitbucketUser
  projects(args: BitbucketInput!): [BitbucketProject]
  repos(args: BitbucketInput!): [BitbucketRepo]
  commits(args: BitbucketInput!): [BitbucketCommit]
  commit(args: BitbucketInput!): BitbucketCommit
  branches(args: BitbucketInput!): [BitbucketBranch]
  file(args: BitbucketInput!): String
}

type BitbucketUser {
  name: String!
  emailAddress: String
  id: Int
  displayName: String
  slug: String
}

type BitbucketProject {
  key: String!
  name: String
  id: Int
}

type BitbucketRepo {
  slug: String!
  id: Int!
  project: BitbucketProject!
  name: String!
}

type BitbucketRepoBeingCached {
  projectKey: String!
  repoName: String!
  commit: String!
}

type BitbucketCommit {
  id: String!
  committer: BitbucketUser!
  message: String!
  authorTimestamp: Float!
}

type BitbucketBranch {
  id: String!
  displayId: String!
  latestCommit: String!
  isDefault: Boolean!
}

type Log {
  level: String!
  time: String!
  message: String!
}
