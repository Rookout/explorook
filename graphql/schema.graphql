type Repository {
  fullpath: String!
  repoName: String!
  id: String!
  indexDone: Boolean
  lastCommitDescription: CommitDescription
}

type FileInfo {
  path: String!
  name: String!
  isFolder: Boolean!
  size: Int
}

type Author {
  name: String
  email: String
  timestamp: Int
}

type CommitDescription {
  message: String!
  author: Author!
  oid: String!
}

type Query {
  appVersion: String!
  dir(repoId: String!, path: String!): [FileInfo]!
  file(repoId: String!, path: String!): String!
  listTree(repoId: String!): [String]!
  listRepos: [Repository!]!
  refreshIndex(repoId: String!): Boolean
  repository(repoId: String!): Repository!
  getAllPerforceViews: [PerforceView]
  getPerforceChangelistForFile(repoId: String!, path: String!): String
  getCommitIdForFile(
    provider: OnPremSourceProvider!
    remoteOrigin: String
    repoId: String!
    path: String!
  ): String
  getFilesTreeFromPerforce(depot: String!, labelOrChangelist: String!): [String]!
  settings: Settings!
  canAuthGitRepos(sources: [GitRepo]!): [CanAuthGitRepoResponse]!
  testPerforceConnection(connectionSettings: PerforceConnectionSettings!): OperationStatus!
  BitbucketOnPrem: BitbucketOnPrem!
  langServerConfig: LangServerConfig!
}

input PerforceConnectionSettings {
  PerforceConnectionString: String
  PerforceUser: String
  PerforceTimeout: String
}

input BitbucketInput {
  url: String!
  accessToken: String!
  projectKey: String
  repoName: String
  commit: String
  branch: String
  filePath: String
}

input GitRepo {
  repoUrl: String!
}

type CanAuthGitRepoResponse {
  repoUrl: String!
  isSuccess: Boolean!
  reason: String
}

type Settings {
  PerforceConnectionString: String
  PerforceUser: String
  PerforceTimeout: String
  BitbucketOnPremServers: [String]
}

input SettingsInput {
  PerforceConnectionString: String
  PerforceUser: String
  PerforceTimeout: String
  BitbucketOnPremServers: [String] @deprecated(reason: "there is no need to pre-configure valid URLs")
  """use this flag to signal that the provided settings should override any
  global settings provided by the admin.
  When a user edits his own local settings - set this flag to true
  When applying the global settings of the organization - set this flag to false"""
  OverrideGlobal: Boolean
}

type LangServerConfig {
  java: javaLangServerConfig
}

type javaLangServerConfig {
  jdkLocation: String
  jdkMinimumVersionRequired: String
}

type OperationStatus {
  isSuccess: Boolean!
  reason: String
}

input GitSource {
  repoUrl: String!
  commit: String!
}

type Mutation {
  addRepository(fullpath: String): Boolean
  removeRepository(repoId: String!): Boolean
  changePerforceViews(views: [String]!): OperationStatus!
  switchPerforceChangelist(changelistId: String!): OperationStatus!
  getGitRepo(sources: [GitSource]!): OperationStatus!
  getFileFromPerforce(depotFilePath: String!, labelOrChangelist: String!): String!
  changePerforceViewsV2(views: [String]!, shouldSync: Boolean!): OperationStatus!
  settings(settings: SettingsInput): Settings!
  userEmail(userEmail: String): Boolean
  langServerConfig: LangServerOps!
}

type LangServerOps {
  setJavaLangServerConfig(config: JavaLangServerConfigInput): OperationStatus!
}

input JavaLangServerConfigInput {
  jdkLocation: String
}

type PerforceView {
  name: String!
  map: String!
}

enum OnPremSourceProvider {
  git
  perforce
}

type BitbucketOnPrem {
  fileTree(args: BitbucketInput!): [String]
  user(args: BitbucketInput!): BitbucketUser
  projects(args: BitbucketInput!): [BitbucketProject]
  repos(args: BitbucketInput!): [BitbucketRepo]
  commits(args: BitbucketInput!): [BitbucketCommit]
  commit(args: BitbucketInput!): BitbucketCommit
  branches(args: BitbucketInput!): [BitbucketBranch]
  file(args: BitbucketInput!): String
}

type BitbucketUser {
  name: String!
  emailAddress: String
  id: Int
  displayName: String
  slug: String
}

type BitbucketProject {
  key: String!
  name: String
  id: Int
}

type BitbucketRepo {
  slug: String!
  id: Int!
  project: BitbucketProject!
  name: String!
}

type BitbucketCommit {
  id: String!
  committer: BitbucketUser!
  message: String!
  authorTimestamp: Float!
}

type BitbucketBranch {
  id: String!
  displayId: String!
  latestCommit: String!
  isDefault: Boolean!
}
